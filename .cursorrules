# EchoSphere Vista 项目规范
# 这是一个 Vue + Sass 项目的 Cursor IDE 规范文件

# 项目规范
rules:
  # 通用代码风格
  - name: "使用双引号"
    pattern: "使用双引号作为字符串定界符，保持一致性"
    
  - name: "缩进使用2个空格"
    pattern: "在所有文件中使用2个空格进行缩进"
    
  - name: "行尾不留多余空格"
    pattern: "避免在行尾保留多余空格"
    
  - name: "文件结尾留一个空行"
    pattern: "每个文件末尾应当有一个空行"
  
  # Vue 组件规范
  - name: "组件命名规范"
    pattern: "组件文件名使用 PascalCase 命名（如 TheHeader.vue）"
    
  - name: "组件结构顺序"
    pattern: "组件内部结构按照 <template>, <script>, <style> 顺序排列"
    
  - name: "组件 props 规范"
    pattern: "props 必须使用 defineProps 指定类型，并使用驼峰命名法（camelCase）"
    
  - name: "CSS 作用域"
    pattern: "组件样式应使用 scoped 或模块化避免全局污染"
    
  - name: "Vue 组合式 API"
    pattern: "优先使用组合式 API 而非选项式 API，并使用 <script setup> 语法"
  
  # Sass/SCSS 规范
  - name: "避免直接使用颜色"
    pattern: "不要使用硬编码颜色值，而应引用 variables.scss 中的变量"
    
  - name: "CSS 选择器嵌套"
    pattern: "SCSS 选择器嵌套不要超过3层，以避免特异性过高"
    
  - name: "避免使用 !important"
    pattern: "尽量避免使用 !important，应通过优化选择器特异性解决问题"
    
  - name: "模块化 CSS"
    pattern: "按照功能将样式分组，每组用注释标识"
    
  - name: "有关颜色处理"
    pattern: "使用预定义的 CSS 变量而非 color.adjust() 函数处理颜色，Sass 无法处理 CSS 变量"
  
  # 命名规范
  - name: "CSS 类名使用连字符"
    pattern: "CSS 类名使用连字符分隔式 (kebab-case)"
    
  - name: "JavaScript 变量"
    pattern: "JavaScript 变量和函数使用驼峰命名法 (camelCase)"
    
  - name: "Vue 事件"
    pattern: "Vue 事件名使用 kebab-case，如 @click, @input-change"
  
  # 注释规范
  - name: "代码注释"
    pattern: "重要功能、逻辑或复杂代码需添加解释性注释"
    
  - name: "CSS 分组注释"
    pattern: "CSS 代码应使用注释分隔不同部分，如 // 导航栏样式"
  
  # 最佳实践
  - name: "响应式设计"
    pattern: "使用媒体查询和相对单位确保页面响应式"
    
  - name: "避免魔法数字"
    pattern: "避免在代码中使用无注释说明的魔法数字，应使用有含义的变量"
    
  - name: "使用预定义变量"
    pattern: "优先使用 variables.scss 中预定义的变量，如间距、颜色、动画时间等"
    
  - name: "模块导入"
    pattern: "在 SCSS 文件中使用 @use 而非 @import 导入模块，以避免全局命名空间污染"
    
  - name: "动画效果"
    pattern: "动画过渡效果使用预定义的动画时间和曲线，保持一致性"
    
  - name: "暗色主题"
    pattern: "确保添加新样式时同时考虑暗色主题的对应变量"
    
  - name: "TypeScript 类型声明"
    pattern: "所有变量、函数参数和返回值应当声明明确的类型，避免使用 any"

# 目录结构规范
structure:
  - path: "src/components"
    description: "存放所有可复用的 Vue 组件，如导航栏、页脚等"
    
  - path: "src/views"
    description: "存放页面级组件，每个文件对应一个路由页面"
    
  - path: "src/styles"
    description: "存放全局样式、变量定义和主题配置"
    
  - path: "src/router"
    description: "Vue Router 配置和路由定义"
    
  - path: "src/assets"
    description: "静态资源如图片、字体等"
    
  - path: "src/utils"
    description: "工具函数和辅助方法"
    
  - path: "src/types"
    description: "TypeScript 类型定义和接口"

# 代码生成和自动完成
snippets:
  - name: "vue-component"
    description: "创建新 Vue 组件的基本结构 (使用 <script setup> 和 TypeScript)"
    template: |
      <template>
        <div class="component-name">
          
        </div>
      </template>
      
      <script setup lang="ts">
      import { ref, computed, onMounted } from 'vue'
      
      // 定义 props
      interface Props {
        propName?: string
      }
      
      const props = defineProps<Props>()
      
      // 定义 emit 事件
      const emit = defineEmits<{
        (e: 'update', value: string): void
      }>()
      
      // 响应式数据
      const data = ref<string>('')
      
      // 计算属性
      const computedValue = computed(() => {
        return data.value
      })
      
      // 方法
      const handleAction = (): void => {
        emit('update', data.value)
      }
      
      // 生命周期钩子
      onMounted(() => {
        // 组件挂载后的逻辑
      })
      </script>
      
      <style lang="scss" scoped>
      .component-name {
        
      }
      </style>
  
  - name: "scss-module"
    description: "创建新 SCSS 模块"
    template: |
      @use '../styles/variables';
      
      // 组件主容器
      .container-name {
        
      }
      
      // 响应式样式
      @media (min-width: $breakpoint-md) {
        .container-name {
          
        }
      }
  
  - name: "theme-vars"
    description: "添加主题相关变量"
    template: |
      // 亮色主题
      --component-bg-light: #ffffff;
      --component-text-light: var(--text-light);
      
      // 暗色主题
      --component-bg-dark: #1e293b;
      --component-text-dark: var(--text-dark);
      
      // 当前主题
      --component-bg: var(--component-bg-light);
      --component-text: var(--component-text-light);
      
      .dark-theme {
        --component-bg: var(--component-bg-dark);
        --component-text: var(--component-text-dark);
      }
      
  - name: "vue-interface"
    description: "创建 TypeScript 接口定义"
    template: |
      export interface EntityName {
        id: number;
        name: string;
        createdAt: Date;
      } 